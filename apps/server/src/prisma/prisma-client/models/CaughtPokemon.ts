/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `CaughtPokemon` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg.ts';
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums.ts';
import type * as Prisma from '../internal/prismaNamespace.ts';

/**
 * Model CaughtPokemon
 *
 */
export type CaughtPokemonModel =
  runtime.Types.Result.DefaultSelection<Prisma.$CaughtPokemonPayload>;

export type AggregateCaughtPokemon = {
  _count: CaughtPokemonCountAggregateOutputType | null;
  _avg: CaughtPokemonAvgAggregateOutputType | null;
  _sum: CaughtPokemonSumAggregateOutputType | null;
  _min: CaughtPokemonMinAggregateOutputType | null;
  _max: CaughtPokemonMaxAggregateOutputType | null;
};

export type CaughtPokemonAvgAggregateOutputType = {
  pokemonId: number | null;
};

export type CaughtPokemonSumAggregateOutputType = {
  pokemonId: number | null;
};

export type CaughtPokemonMinAggregateOutputType = {
  id: string | null;
  caughtAt: Date | null;
  nickname: string | null;
  pokemonId: number | null;
  shiny: boolean | null;
  userId: string | null;
};

export type CaughtPokemonMaxAggregateOutputType = {
  id: string | null;
  caughtAt: Date | null;
  nickname: string | null;
  pokemonId: number | null;
  shiny: boolean | null;
  userId: string | null;
};

export type CaughtPokemonCountAggregateOutputType = {
  id: number;
  caughtAt: number;
  nickname: number;
  pokemonId: number;
  shiny: number;
  stats: number;
  userId: number;
  _all: number;
};

export type CaughtPokemonAvgAggregateInputType = {
  pokemonId?: true;
};

export type CaughtPokemonSumAggregateInputType = {
  pokemonId?: true;
};

export type CaughtPokemonMinAggregateInputType = {
  id?: true;
  caughtAt?: true;
  nickname?: true;
  pokemonId?: true;
  shiny?: true;
  userId?: true;
};

export type CaughtPokemonMaxAggregateInputType = {
  id?: true;
  caughtAt?: true;
  nickname?: true;
  pokemonId?: true;
  shiny?: true;
  userId?: true;
};

export type CaughtPokemonCountAggregateInputType = {
  id?: true;
  caughtAt?: true;
  nickname?: true;
  pokemonId?: true;
  shiny?: true;
  stats?: true;
  userId?: true;
  _all?: true;
};

export type CaughtPokemonAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which CaughtPokemon to aggregate.
   */
  where?: Prisma.CaughtPokemonWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CaughtPokemon to fetch.
   */
  orderBy?:
    | Prisma.CaughtPokemonOrderByWithRelationInput
    | Prisma.CaughtPokemonOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.CaughtPokemonWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CaughtPokemon from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CaughtPokemon.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned CaughtPokemon
   **/
  _count?: true | CaughtPokemonCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: CaughtPokemonAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: CaughtPokemonSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: CaughtPokemonMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: CaughtPokemonMaxAggregateInputType;
};

export type GetCaughtPokemonAggregateType<
  T extends CaughtPokemonAggregateArgs,
> = {
  [P in keyof T & keyof AggregateCaughtPokemon]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCaughtPokemon[P]>
    : Prisma.GetScalarType<T[P], AggregateCaughtPokemon[P]>;
};

export type CaughtPokemonGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.CaughtPokemonWhereInput;
  orderBy?:
    | Prisma.CaughtPokemonOrderByWithAggregationInput
    | Prisma.CaughtPokemonOrderByWithAggregationInput[];
  by:
    | Prisma.CaughtPokemonScalarFieldEnum[]
    | Prisma.CaughtPokemonScalarFieldEnum;
  having?: Prisma.CaughtPokemonScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: CaughtPokemonCountAggregateInputType | true;
  _avg?: CaughtPokemonAvgAggregateInputType;
  _sum?: CaughtPokemonSumAggregateInputType;
  _min?: CaughtPokemonMinAggregateInputType;
  _max?: CaughtPokemonMaxAggregateInputType;
};

export type CaughtPokemonGroupByOutputType = {
  id: string;
  caughtAt: Date;
  nickname: string | null;
  pokemonId: number;
  shiny: boolean;
  stats: PrismaJson.PokemonStats;
  userId: string;
  _count: CaughtPokemonCountAggregateOutputType | null;
  _avg: CaughtPokemonAvgAggregateOutputType | null;
  _sum: CaughtPokemonSumAggregateOutputType | null;
  _min: CaughtPokemonMinAggregateOutputType | null;
  _max: CaughtPokemonMaxAggregateOutputType | null;
};

type GetCaughtPokemonGroupByPayload<T extends CaughtPokemonGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<CaughtPokemonGroupByOutputType, T['by']> & {
        [P in keyof T &
          keyof CaughtPokemonGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CaughtPokemonGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CaughtPokemonGroupByOutputType[P]>;
      }
    >
  >;

export type CaughtPokemonWhereInput = {
  AND?: Prisma.CaughtPokemonWhereInput | Prisma.CaughtPokemonWhereInput[];
  OR?: Prisma.CaughtPokemonWhereInput[];
  NOT?: Prisma.CaughtPokemonWhereInput | Prisma.CaughtPokemonWhereInput[];
  id?: Prisma.StringFilter<'CaughtPokemon'> | string;
  caughtAt?: Prisma.DateTimeFilter<'CaughtPokemon'> | Date | string;
  nickname?: Prisma.StringNullableFilter<'CaughtPokemon'> | string | null;
  pokemonId?: Prisma.IntFilter<'CaughtPokemon'> | number;
  shiny?: Prisma.BoolFilter<'CaughtPokemon'> | boolean;
  stats?: Prisma.JsonFilter<'CaughtPokemon'>;
  userId?: Prisma.StringFilter<'CaughtPokemon'> | string;
  pokemon?: Prisma.XOR<
    Prisma.PokemonScalarRelationFilter,
    Prisma.PokemonWhereInput
  >;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
};

export type CaughtPokemonOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  caughtAt?: Prisma.SortOrder;
  nickname?: Prisma.SortOrderInput | Prisma.SortOrder;
  pokemonId?: Prisma.SortOrder;
  shiny?: Prisma.SortOrder;
  stats?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  pokemon?: Prisma.PokemonOrderByWithRelationInput;
  user?: Prisma.UserOrderByWithRelationInput;
};

export type CaughtPokemonWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.CaughtPokemonWhereInput | Prisma.CaughtPokemonWhereInput[];
    OR?: Prisma.CaughtPokemonWhereInput[];
    NOT?: Prisma.CaughtPokemonWhereInput | Prisma.CaughtPokemonWhereInput[];
    caughtAt?: Prisma.DateTimeFilter<'CaughtPokemon'> | Date | string;
    nickname?: Prisma.StringNullableFilter<'CaughtPokemon'> | string | null;
    pokemonId?: Prisma.IntFilter<'CaughtPokemon'> | number;
    shiny?: Prisma.BoolFilter<'CaughtPokemon'> | boolean;
    stats?: Prisma.JsonFilter<'CaughtPokemon'>;
    userId?: Prisma.StringFilter<'CaughtPokemon'> | string;
    pokemon?: Prisma.XOR<
      Prisma.PokemonScalarRelationFilter,
      Prisma.PokemonWhereInput
    >;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  },
  'id'
>;

export type CaughtPokemonOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  caughtAt?: Prisma.SortOrder;
  nickname?: Prisma.SortOrderInput | Prisma.SortOrder;
  pokemonId?: Prisma.SortOrder;
  shiny?: Prisma.SortOrder;
  stats?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  _count?: Prisma.CaughtPokemonCountOrderByAggregateInput;
  _avg?: Prisma.CaughtPokemonAvgOrderByAggregateInput;
  _max?: Prisma.CaughtPokemonMaxOrderByAggregateInput;
  _min?: Prisma.CaughtPokemonMinOrderByAggregateInput;
  _sum?: Prisma.CaughtPokemonSumOrderByAggregateInput;
};

export type CaughtPokemonScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.CaughtPokemonScalarWhereWithAggregatesInput
    | Prisma.CaughtPokemonScalarWhereWithAggregatesInput[];
  OR?: Prisma.CaughtPokemonScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.CaughtPokemonScalarWhereWithAggregatesInput
    | Prisma.CaughtPokemonScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<'CaughtPokemon'> | string;
  caughtAt?:
    | Prisma.DateTimeWithAggregatesFilter<'CaughtPokemon'>
    | Date
    | string;
  nickname?:
    | Prisma.StringNullableWithAggregatesFilter<'CaughtPokemon'>
    | string
    | null;
  pokemonId?: Prisma.IntWithAggregatesFilter<'CaughtPokemon'> | number;
  shiny?: Prisma.BoolWithAggregatesFilter<'CaughtPokemon'> | boolean;
  stats?: Prisma.JsonWithAggregatesFilter<'CaughtPokemon'>;
  userId?: Prisma.StringWithAggregatesFilter<'CaughtPokemon'> | string;
};

export type CaughtPokemonCreateInput = {
  id?: string;
  caughtAt?: Date | string;
  nickname?: string | null;
  shiny: boolean;
  stats: PrismaJson.PokemonStats;
  pokemon: Prisma.PokemonCreateNestedOneWithoutCaughtPokemonInput;
  user: Prisma.UserCreateNestedOneWithoutCaughtPokemonInput;
};

export type CaughtPokemonUncheckedCreateInput = {
  id?: string;
  caughtAt?: Date | string;
  nickname?: string | null;
  pokemonId: number;
  shiny: boolean;
  stats: PrismaJson.PokemonStats;
  userId: string;
};

export type CaughtPokemonUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  caughtAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  nickname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  shiny?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  stats?: PrismaJson.PokemonStats;
  pokemon?: Prisma.PokemonUpdateOneRequiredWithoutCaughtPokemonNestedInput;
  user?: Prisma.UserUpdateOneRequiredWithoutCaughtPokemonNestedInput;
};

export type CaughtPokemonUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  caughtAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  nickname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  pokemonId?: Prisma.IntFieldUpdateOperationsInput | number;
  shiny?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  stats?: PrismaJson.PokemonStats;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type CaughtPokemonCreateManyInput = {
  id?: string;
  caughtAt?: Date | string;
  nickname?: string | null;
  pokemonId: number;
  shiny: boolean;
  stats: PrismaJson.PokemonStats;
  userId: string;
};

export type CaughtPokemonUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  caughtAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  nickname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  shiny?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  stats?: PrismaJson.PokemonStats;
};

export type CaughtPokemonUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  caughtAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  nickname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  pokemonId?: Prisma.IntFieldUpdateOperationsInput | number;
  shiny?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  stats?: PrismaJson.PokemonStats;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type CaughtPokemonListRelationFilter = {
  every?: Prisma.CaughtPokemonWhereInput;
  some?: Prisma.CaughtPokemonWhereInput;
  none?: Prisma.CaughtPokemonWhereInput;
};

export type CaughtPokemonOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type CaughtPokemonCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  caughtAt?: Prisma.SortOrder;
  nickname?: Prisma.SortOrder;
  pokemonId?: Prisma.SortOrder;
  shiny?: Prisma.SortOrder;
  stats?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type CaughtPokemonAvgOrderByAggregateInput = {
  pokemonId?: Prisma.SortOrder;
};

export type CaughtPokemonMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  caughtAt?: Prisma.SortOrder;
  nickname?: Prisma.SortOrder;
  pokemonId?: Prisma.SortOrder;
  shiny?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type CaughtPokemonMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  caughtAt?: Prisma.SortOrder;
  nickname?: Prisma.SortOrder;
  pokemonId?: Prisma.SortOrder;
  shiny?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type CaughtPokemonSumOrderByAggregateInput = {
  pokemonId?: Prisma.SortOrder;
};

export type CaughtPokemonCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.CaughtPokemonCreateWithoutUserInput,
        Prisma.CaughtPokemonUncheckedCreateWithoutUserInput
      >
    | Prisma.CaughtPokemonCreateWithoutUserInput[]
    | Prisma.CaughtPokemonUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.CaughtPokemonCreateOrConnectWithoutUserInput
    | Prisma.CaughtPokemonCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.CaughtPokemonCreateManyUserInputEnvelope;
  connect?:
    | Prisma.CaughtPokemonWhereUniqueInput
    | Prisma.CaughtPokemonWhereUniqueInput[];
};

export type CaughtPokemonUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.CaughtPokemonCreateWithoutUserInput,
        Prisma.CaughtPokemonUncheckedCreateWithoutUserInput
      >
    | Prisma.CaughtPokemonCreateWithoutUserInput[]
    | Prisma.CaughtPokemonUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.CaughtPokemonCreateOrConnectWithoutUserInput
    | Prisma.CaughtPokemonCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.CaughtPokemonCreateManyUserInputEnvelope;
  connect?:
    | Prisma.CaughtPokemonWhereUniqueInput
    | Prisma.CaughtPokemonWhereUniqueInput[];
};

export type CaughtPokemonUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.CaughtPokemonCreateWithoutUserInput,
        Prisma.CaughtPokemonUncheckedCreateWithoutUserInput
      >
    | Prisma.CaughtPokemonCreateWithoutUserInput[]
    | Prisma.CaughtPokemonUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.CaughtPokemonCreateOrConnectWithoutUserInput
    | Prisma.CaughtPokemonCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.CaughtPokemonUpsertWithWhereUniqueWithoutUserInput
    | Prisma.CaughtPokemonUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.CaughtPokemonCreateManyUserInputEnvelope;
  set?:
    | Prisma.CaughtPokemonWhereUniqueInput
    | Prisma.CaughtPokemonWhereUniqueInput[];
  disconnect?:
    | Prisma.CaughtPokemonWhereUniqueInput
    | Prisma.CaughtPokemonWhereUniqueInput[];
  delete?:
    | Prisma.CaughtPokemonWhereUniqueInput
    | Prisma.CaughtPokemonWhereUniqueInput[];
  connect?:
    | Prisma.CaughtPokemonWhereUniqueInput
    | Prisma.CaughtPokemonWhereUniqueInput[];
  update?:
    | Prisma.CaughtPokemonUpdateWithWhereUniqueWithoutUserInput
    | Prisma.CaughtPokemonUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.CaughtPokemonUpdateManyWithWhereWithoutUserInput
    | Prisma.CaughtPokemonUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.CaughtPokemonScalarWhereInput
    | Prisma.CaughtPokemonScalarWhereInput[];
};

export type CaughtPokemonUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.CaughtPokemonCreateWithoutUserInput,
        Prisma.CaughtPokemonUncheckedCreateWithoutUserInput
      >
    | Prisma.CaughtPokemonCreateWithoutUserInput[]
    | Prisma.CaughtPokemonUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.CaughtPokemonCreateOrConnectWithoutUserInput
    | Prisma.CaughtPokemonCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.CaughtPokemonUpsertWithWhereUniqueWithoutUserInput
    | Prisma.CaughtPokemonUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.CaughtPokemonCreateManyUserInputEnvelope;
  set?:
    | Prisma.CaughtPokemonWhereUniqueInput
    | Prisma.CaughtPokemonWhereUniqueInput[];
  disconnect?:
    | Prisma.CaughtPokemonWhereUniqueInput
    | Prisma.CaughtPokemonWhereUniqueInput[];
  delete?:
    | Prisma.CaughtPokemonWhereUniqueInput
    | Prisma.CaughtPokemonWhereUniqueInput[];
  connect?:
    | Prisma.CaughtPokemonWhereUniqueInput
    | Prisma.CaughtPokemonWhereUniqueInput[];
  update?:
    | Prisma.CaughtPokemonUpdateWithWhereUniqueWithoutUserInput
    | Prisma.CaughtPokemonUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.CaughtPokemonUpdateManyWithWhereWithoutUserInput
    | Prisma.CaughtPokemonUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.CaughtPokemonScalarWhereInput
    | Prisma.CaughtPokemonScalarWhereInput[];
};

export type CaughtPokemonCreateNestedManyWithoutPokemonInput = {
  create?:
    | Prisma.XOR<
        Prisma.CaughtPokemonCreateWithoutPokemonInput,
        Prisma.CaughtPokemonUncheckedCreateWithoutPokemonInput
      >
    | Prisma.CaughtPokemonCreateWithoutPokemonInput[]
    | Prisma.CaughtPokemonUncheckedCreateWithoutPokemonInput[];
  connectOrCreate?:
    | Prisma.CaughtPokemonCreateOrConnectWithoutPokemonInput
    | Prisma.CaughtPokemonCreateOrConnectWithoutPokemonInput[];
  createMany?: Prisma.CaughtPokemonCreateManyPokemonInputEnvelope;
  connect?:
    | Prisma.CaughtPokemonWhereUniqueInput
    | Prisma.CaughtPokemonWhereUniqueInput[];
};

export type CaughtPokemonUncheckedCreateNestedManyWithoutPokemonInput = {
  create?:
    | Prisma.XOR<
        Prisma.CaughtPokemonCreateWithoutPokemonInput,
        Prisma.CaughtPokemonUncheckedCreateWithoutPokemonInput
      >
    | Prisma.CaughtPokemonCreateWithoutPokemonInput[]
    | Prisma.CaughtPokemonUncheckedCreateWithoutPokemonInput[];
  connectOrCreate?:
    | Prisma.CaughtPokemonCreateOrConnectWithoutPokemonInput
    | Prisma.CaughtPokemonCreateOrConnectWithoutPokemonInput[];
  createMany?: Prisma.CaughtPokemonCreateManyPokemonInputEnvelope;
  connect?:
    | Prisma.CaughtPokemonWhereUniqueInput
    | Prisma.CaughtPokemonWhereUniqueInput[];
};

export type CaughtPokemonUpdateManyWithoutPokemonNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.CaughtPokemonCreateWithoutPokemonInput,
        Prisma.CaughtPokemonUncheckedCreateWithoutPokemonInput
      >
    | Prisma.CaughtPokemonCreateWithoutPokemonInput[]
    | Prisma.CaughtPokemonUncheckedCreateWithoutPokemonInput[];
  connectOrCreate?:
    | Prisma.CaughtPokemonCreateOrConnectWithoutPokemonInput
    | Prisma.CaughtPokemonCreateOrConnectWithoutPokemonInput[];
  upsert?:
    | Prisma.CaughtPokemonUpsertWithWhereUniqueWithoutPokemonInput
    | Prisma.CaughtPokemonUpsertWithWhereUniqueWithoutPokemonInput[];
  createMany?: Prisma.CaughtPokemonCreateManyPokemonInputEnvelope;
  set?:
    | Prisma.CaughtPokemonWhereUniqueInput
    | Prisma.CaughtPokemonWhereUniqueInput[];
  disconnect?:
    | Prisma.CaughtPokemonWhereUniqueInput
    | Prisma.CaughtPokemonWhereUniqueInput[];
  delete?:
    | Prisma.CaughtPokemonWhereUniqueInput
    | Prisma.CaughtPokemonWhereUniqueInput[];
  connect?:
    | Prisma.CaughtPokemonWhereUniqueInput
    | Prisma.CaughtPokemonWhereUniqueInput[];
  update?:
    | Prisma.CaughtPokemonUpdateWithWhereUniqueWithoutPokemonInput
    | Prisma.CaughtPokemonUpdateWithWhereUniqueWithoutPokemonInput[];
  updateMany?:
    | Prisma.CaughtPokemonUpdateManyWithWhereWithoutPokemonInput
    | Prisma.CaughtPokemonUpdateManyWithWhereWithoutPokemonInput[];
  deleteMany?:
    | Prisma.CaughtPokemonScalarWhereInput
    | Prisma.CaughtPokemonScalarWhereInput[];
};

export type CaughtPokemonUncheckedUpdateManyWithoutPokemonNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.CaughtPokemonCreateWithoutPokemonInput,
        Prisma.CaughtPokemonUncheckedCreateWithoutPokemonInput
      >
    | Prisma.CaughtPokemonCreateWithoutPokemonInput[]
    | Prisma.CaughtPokemonUncheckedCreateWithoutPokemonInput[];
  connectOrCreate?:
    | Prisma.CaughtPokemonCreateOrConnectWithoutPokemonInput
    | Prisma.CaughtPokemonCreateOrConnectWithoutPokemonInput[];
  upsert?:
    | Prisma.CaughtPokemonUpsertWithWhereUniqueWithoutPokemonInput
    | Prisma.CaughtPokemonUpsertWithWhereUniqueWithoutPokemonInput[];
  createMany?: Prisma.CaughtPokemonCreateManyPokemonInputEnvelope;
  set?:
    | Prisma.CaughtPokemonWhereUniqueInput
    | Prisma.CaughtPokemonWhereUniqueInput[];
  disconnect?:
    | Prisma.CaughtPokemonWhereUniqueInput
    | Prisma.CaughtPokemonWhereUniqueInput[];
  delete?:
    | Prisma.CaughtPokemonWhereUniqueInput
    | Prisma.CaughtPokemonWhereUniqueInput[];
  connect?:
    | Prisma.CaughtPokemonWhereUniqueInput
    | Prisma.CaughtPokemonWhereUniqueInput[];
  update?:
    | Prisma.CaughtPokemonUpdateWithWhereUniqueWithoutPokemonInput
    | Prisma.CaughtPokemonUpdateWithWhereUniqueWithoutPokemonInput[];
  updateMany?:
    | Prisma.CaughtPokemonUpdateManyWithWhereWithoutPokemonInput
    | Prisma.CaughtPokemonUpdateManyWithWhereWithoutPokemonInput[];
  deleteMany?:
    | Prisma.CaughtPokemonScalarWhereInput
    | Prisma.CaughtPokemonScalarWhereInput[];
};

export type CaughtPokemonCreateWithoutUserInput = {
  id?: string;
  caughtAt?: Date | string;
  nickname?: string | null;
  shiny: boolean;
  stats: PrismaJson.PokemonStats;
  pokemon: Prisma.PokemonCreateNestedOneWithoutCaughtPokemonInput;
};

export type CaughtPokemonUncheckedCreateWithoutUserInput = {
  id?: string;
  caughtAt?: Date | string;
  nickname?: string | null;
  pokemonId: number;
  shiny: boolean;
  stats: PrismaJson.PokemonStats;
};

export type CaughtPokemonCreateOrConnectWithoutUserInput = {
  where: Prisma.CaughtPokemonWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.CaughtPokemonCreateWithoutUserInput,
    Prisma.CaughtPokemonUncheckedCreateWithoutUserInput
  >;
};

export type CaughtPokemonCreateManyUserInputEnvelope = {
  data:
    | Prisma.CaughtPokemonCreateManyUserInput
    | Prisma.CaughtPokemonCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type CaughtPokemonUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.CaughtPokemonWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.CaughtPokemonUpdateWithoutUserInput,
    Prisma.CaughtPokemonUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.CaughtPokemonCreateWithoutUserInput,
    Prisma.CaughtPokemonUncheckedCreateWithoutUserInput
  >;
};

export type CaughtPokemonUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.CaughtPokemonWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.CaughtPokemonUpdateWithoutUserInput,
    Prisma.CaughtPokemonUncheckedUpdateWithoutUserInput
  >;
};

export type CaughtPokemonUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.CaughtPokemonScalarWhereInput;
  data: Prisma.XOR<
    Prisma.CaughtPokemonUpdateManyMutationInput,
    Prisma.CaughtPokemonUncheckedUpdateManyWithoutUserInput
  >;
};

export type CaughtPokemonScalarWhereInput = {
  AND?:
    | Prisma.CaughtPokemonScalarWhereInput
    | Prisma.CaughtPokemonScalarWhereInput[];
  OR?: Prisma.CaughtPokemonScalarWhereInput[];
  NOT?:
    | Prisma.CaughtPokemonScalarWhereInput
    | Prisma.CaughtPokemonScalarWhereInput[];
  id?: Prisma.StringFilter<'CaughtPokemon'> | string;
  caughtAt?: Prisma.DateTimeFilter<'CaughtPokemon'> | Date | string;
  nickname?: Prisma.StringNullableFilter<'CaughtPokemon'> | string | null;
  pokemonId?: Prisma.IntFilter<'CaughtPokemon'> | number;
  shiny?: Prisma.BoolFilter<'CaughtPokemon'> | boolean;
  stats?: Prisma.JsonFilter<'CaughtPokemon'>;
  userId?: Prisma.StringFilter<'CaughtPokemon'> | string;
};

export type CaughtPokemonCreateWithoutPokemonInput = {
  id?: string;
  caughtAt?: Date | string;
  nickname?: string | null;
  shiny: boolean;
  stats: PrismaJson.PokemonStats;
  user: Prisma.UserCreateNestedOneWithoutCaughtPokemonInput;
};

export type CaughtPokemonUncheckedCreateWithoutPokemonInput = {
  id?: string;
  caughtAt?: Date | string;
  nickname?: string | null;
  shiny: boolean;
  stats: PrismaJson.PokemonStats;
  userId: string;
};

export type CaughtPokemonCreateOrConnectWithoutPokemonInput = {
  where: Prisma.CaughtPokemonWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.CaughtPokemonCreateWithoutPokemonInput,
    Prisma.CaughtPokemonUncheckedCreateWithoutPokemonInput
  >;
};

export type CaughtPokemonCreateManyPokemonInputEnvelope = {
  data:
    | Prisma.CaughtPokemonCreateManyPokemonInput
    | Prisma.CaughtPokemonCreateManyPokemonInput[];
  skipDuplicates?: boolean;
};

export type CaughtPokemonUpsertWithWhereUniqueWithoutPokemonInput = {
  where: Prisma.CaughtPokemonWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.CaughtPokemonUpdateWithoutPokemonInput,
    Prisma.CaughtPokemonUncheckedUpdateWithoutPokemonInput
  >;
  create: Prisma.XOR<
    Prisma.CaughtPokemonCreateWithoutPokemonInput,
    Prisma.CaughtPokemonUncheckedCreateWithoutPokemonInput
  >;
};

export type CaughtPokemonUpdateWithWhereUniqueWithoutPokemonInput = {
  where: Prisma.CaughtPokemonWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.CaughtPokemonUpdateWithoutPokemonInput,
    Prisma.CaughtPokemonUncheckedUpdateWithoutPokemonInput
  >;
};

export type CaughtPokemonUpdateManyWithWhereWithoutPokemonInput = {
  where: Prisma.CaughtPokemonScalarWhereInput;
  data: Prisma.XOR<
    Prisma.CaughtPokemonUpdateManyMutationInput,
    Prisma.CaughtPokemonUncheckedUpdateManyWithoutPokemonInput
  >;
};

export type CaughtPokemonCreateManyUserInput = {
  id?: string;
  caughtAt?: Date | string;
  nickname?: string | null;
  pokemonId: number;
  shiny: boolean;
  stats: PrismaJson.PokemonStats;
};

export type CaughtPokemonUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  caughtAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  nickname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  shiny?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  stats?: PrismaJson.PokemonStats;
  pokemon?: Prisma.PokemonUpdateOneRequiredWithoutCaughtPokemonNestedInput;
};

export type CaughtPokemonUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  caughtAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  nickname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  pokemonId?: Prisma.IntFieldUpdateOperationsInput | number;
  shiny?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  stats?: PrismaJson.PokemonStats;
};

export type CaughtPokemonUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  caughtAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  nickname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  pokemonId?: Prisma.IntFieldUpdateOperationsInput | number;
  shiny?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  stats?: PrismaJson.PokemonStats;
};

export type CaughtPokemonCreateManyPokemonInput = {
  id?: string;
  caughtAt?: Date | string;
  nickname?: string | null;
  shiny: boolean;
  stats: PrismaJson.PokemonStats;
  userId: string;
};

export type CaughtPokemonUpdateWithoutPokemonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  caughtAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  nickname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  shiny?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  stats?: PrismaJson.PokemonStats;
  user?: Prisma.UserUpdateOneRequiredWithoutCaughtPokemonNestedInput;
};

export type CaughtPokemonUncheckedUpdateWithoutPokemonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  caughtAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  nickname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  shiny?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  stats?: PrismaJson.PokemonStats;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type CaughtPokemonUncheckedUpdateManyWithoutPokemonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  caughtAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  nickname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  shiny?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  stats?: PrismaJson.PokemonStats;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type CaughtPokemonSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    caughtAt?: boolean;
    nickname?: boolean;
    pokemonId?: boolean;
    shiny?: boolean;
    stats?: boolean;
    userId?: boolean;
    pokemon?: boolean | Prisma.PokemonDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['caughtPokemon']
>;

export type CaughtPokemonSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    caughtAt?: boolean;
    nickname?: boolean;
    pokemonId?: boolean;
    shiny?: boolean;
    stats?: boolean;
    userId?: boolean;
    pokemon?: boolean | Prisma.PokemonDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['caughtPokemon']
>;

export type CaughtPokemonSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    caughtAt?: boolean;
    nickname?: boolean;
    pokemonId?: boolean;
    shiny?: boolean;
    stats?: boolean;
    userId?: boolean;
    pokemon?: boolean | Prisma.PokemonDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['caughtPokemon']
>;

export type CaughtPokemonSelectScalar = {
  id?: boolean;
  caughtAt?: boolean;
  nickname?: boolean;
  pokemonId?: boolean;
  shiny?: boolean;
  stats?: boolean;
  userId?: boolean;
};

export type CaughtPokemonOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'caughtAt' | 'nickname' | 'pokemonId' | 'shiny' | 'stats' | 'userId',
  ExtArgs['result']['caughtPokemon']
>;
export type CaughtPokemonInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  pokemon?: boolean | Prisma.PokemonDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type CaughtPokemonIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  pokemon?: boolean | Prisma.PokemonDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type CaughtPokemonIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  pokemon?: boolean | Prisma.PokemonDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $CaughtPokemonPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'CaughtPokemon';
  objects: {
    pokemon: Prisma.$PokemonPayload<ExtArgs>;
    user: Prisma.$UserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      caughtAt: Date;
      nickname: string | null;
      pokemonId: number;
      shiny: boolean;
      /**
       * [PokemonStats]
       */
      stats: PrismaJson.PokemonStats;
      userId: string;
    },
    ExtArgs['result']['caughtPokemon']
  >;
  composites: {};
};

export type CaughtPokemonGetPayload<
  S extends boolean | null | undefined | CaughtPokemonDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$CaughtPokemonPayload, S>;

export type CaughtPokemonCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  CaughtPokemonFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: CaughtPokemonCountAggregateInputType | true;
};

export interface CaughtPokemonDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['CaughtPokemon'];
    meta: { name: 'CaughtPokemon' };
  };
  /**
   * Find zero or one CaughtPokemon that matches the filter.
   * @param {CaughtPokemonFindUniqueArgs} args - Arguments to find a CaughtPokemon
   * @example
   * // Get one CaughtPokemon
   * const caughtPokemon = await prisma.caughtPokemon.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CaughtPokemonFindUniqueArgs>(
    args: Prisma.SelectSubset<T, CaughtPokemonFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__CaughtPokemonClient<
    runtime.Types.Result.GetResult<
      Prisma.$CaughtPokemonPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one CaughtPokemon that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CaughtPokemonFindUniqueOrThrowArgs} args - Arguments to find a CaughtPokemon
   * @example
   * // Get one CaughtPokemon
   * const caughtPokemon = await prisma.caughtPokemon.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CaughtPokemonFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, CaughtPokemonFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__CaughtPokemonClient<
    runtime.Types.Result.GetResult<
      Prisma.$CaughtPokemonPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first CaughtPokemon that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CaughtPokemonFindFirstArgs} args - Arguments to find a CaughtPokemon
   * @example
   * // Get one CaughtPokemon
   * const caughtPokemon = await prisma.caughtPokemon.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CaughtPokemonFindFirstArgs>(
    args?: Prisma.SelectSubset<T, CaughtPokemonFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__CaughtPokemonClient<
    runtime.Types.Result.GetResult<
      Prisma.$CaughtPokemonPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first CaughtPokemon that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CaughtPokemonFindFirstOrThrowArgs} args - Arguments to find a CaughtPokemon
   * @example
   * // Get one CaughtPokemon
   * const caughtPokemon = await prisma.caughtPokemon.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CaughtPokemonFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, CaughtPokemonFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__CaughtPokemonClient<
    runtime.Types.Result.GetResult<
      Prisma.$CaughtPokemonPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more CaughtPokemon that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CaughtPokemonFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CaughtPokemon
   * const caughtPokemon = await prisma.caughtPokemon.findMany()
   *
   * // Get first 10 CaughtPokemon
   * const caughtPokemon = await prisma.caughtPokemon.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const caughtPokemonWithIdOnly = await prisma.caughtPokemon.findMany({ select: { id: true } })
   *
   */
  findMany<T extends CaughtPokemonFindManyArgs>(
    args?: Prisma.SelectSubset<T, CaughtPokemonFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CaughtPokemonPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a CaughtPokemon.
   * @param {CaughtPokemonCreateArgs} args - Arguments to create a CaughtPokemon.
   * @example
   * // Create one CaughtPokemon
   * const CaughtPokemon = await prisma.caughtPokemon.create({
   *   data: {
   *     // ... data to create a CaughtPokemon
   *   }
   * })
   *
   */
  create<T extends CaughtPokemonCreateArgs>(
    args: Prisma.SelectSubset<T, CaughtPokemonCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__CaughtPokemonClient<
    runtime.Types.Result.GetResult<
      Prisma.$CaughtPokemonPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many CaughtPokemon.
   * @param {CaughtPokemonCreateManyArgs} args - Arguments to create many CaughtPokemon.
   * @example
   * // Create many CaughtPokemon
   * const caughtPokemon = await prisma.caughtPokemon.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends CaughtPokemonCreateManyArgs>(
    args?: Prisma.SelectSubset<T, CaughtPokemonCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many CaughtPokemon and returns the data saved in the database.
   * @param {CaughtPokemonCreateManyAndReturnArgs} args - Arguments to create many CaughtPokemon.
   * @example
   * // Create many CaughtPokemon
   * const caughtPokemon = await prisma.caughtPokemon.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many CaughtPokemon and only return the `id`
   * const caughtPokemonWithIdOnly = await prisma.caughtPokemon.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends CaughtPokemonCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      CaughtPokemonCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CaughtPokemonPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a CaughtPokemon.
   * @param {CaughtPokemonDeleteArgs} args - Arguments to delete one CaughtPokemon.
   * @example
   * // Delete one CaughtPokemon
   * const CaughtPokemon = await prisma.caughtPokemon.delete({
   *   where: {
   *     // ... filter to delete one CaughtPokemon
   *   }
   * })
   *
   */
  delete<T extends CaughtPokemonDeleteArgs>(
    args: Prisma.SelectSubset<T, CaughtPokemonDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__CaughtPokemonClient<
    runtime.Types.Result.GetResult<
      Prisma.$CaughtPokemonPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one CaughtPokemon.
   * @param {CaughtPokemonUpdateArgs} args - Arguments to update one CaughtPokemon.
   * @example
   * // Update one CaughtPokemon
   * const caughtPokemon = await prisma.caughtPokemon.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends CaughtPokemonUpdateArgs>(
    args: Prisma.SelectSubset<T, CaughtPokemonUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__CaughtPokemonClient<
    runtime.Types.Result.GetResult<
      Prisma.$CaughtPokemonPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more CaughtPokemon.
   * @param {CaughtPokemonDeleteManyArgs} args - Arguments to filter CaughtPokemon to delete.
   * @example
   * // Delete a few CaughtPokemon
   * const { count } = await prisma.caughtPokemon.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends CaughtPokemonDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, CaughtPokemonDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more CaughtPokemon.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CaughtPokemonUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CaughtPokemon
   * const caughtPokemon = await prisma.caughtPokemon.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends CaughtPokemonUpdateManyArgs>(
    args: Prisma.SelectSubset<T, CaughtPokemonUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more CaughtPokemon and returns the data updated in the database.
   * @param {CaughtPokemonUpdateManyAndReturnArgs} args - Arguments to update many CaughtPokemon.
   * @example
   * // Update many CaughtPokemon
   * const caughtPokemon = await prisma.caughtPokemon.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more CaughtPokemon and only return the `id`
   * const caughtPokemonWithIdOnly = await prisma.caughtPokemon.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends CaughtPokemonUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, CaughtPokemonUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CaughtPokemonPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one CaughtPokemon.
   * @param {CaughtPokemonUpsertArgs} args - Arguments to update or create a CaughtPokemon.
   * @example
   * // Update or create a CaughtPokemon
   * const caughtPokemon = await prisma.caughtPokemon.upsert({
   *   create: {
   *     // ... data to create a CaughtPokemon
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CaughtPokemon we want to update
   *   }
   * })
   */
  upsert<T extends CaughtPokemonUpsertArgs>(
    args: Prisma.SelectSubset<T, CaughtPokemonUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__CaughtPokemonClient<
    runtime.Types.Result.GetResult<
      Prisma.$CaughtPokemonPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of CaughtPokemon.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CaughtPokemonCountArgs} args - Arguments to filter CaughtPokemon to count.
   * @example
   * // Count the number of CaughtPokemon
   * const count = await prisma.caughtPokemon.count({
   *   where: {
   *     // ... the filter for the CaughtPokemon we want to count
   *   }
   * })
   **/
  count<T extends CaughtPokemonCountArgs>(
    args?: Prisma.Subset<T, CaughtPokemonCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            CaughtPokemonCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a CaughtPokemon.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CaughtPokemonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends CaughtPokemonAggregateArgs>(
    args: Prisma.Subset<T, CaughtPokemonAggregateArgs>,
  ): Prisma.PrismaPromise<GetCaughtPokemonAggregateType<T>>;

  /**
   * Group by CaughtPokemon.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CaughtPokemonGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends CaughtPokemonGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CaughtPokemonGroupByArgs['orderBy'] }
      : { orderBy?: CaughtPokemonGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, CaughtPokemonGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetCaughtPokemonGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the CaughtPokemon model
   */
  readonly fields: CaughtPokemonFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CaughtPokemon.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CaughtPokemonClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  pokemon<T extends Prisma.PokemonDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.PokemonDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__PokemonClient<
    | runtime.Types.Result.GetResult<
        Prisma.$PokemonPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the CaughtPokemon model
 */
export interface CaughtPokemonFieldRefs {
  readonly id: Prisma.FieldRef<'CaughtPokemon', 'String'>;
  readonly caughtAt: Prisma.FieldRef<'CaughtPokemon', 'DateTime'>;
  readonly nickname: Prisma.FieldRef<'CaughtPokemon', 'String'>;
  readonly pokemonId: Prisma.FieldRef<'CaughtPokemon', 'Int'>;
  readonly shiny: Prisma.FieldRef<'CaughtPokemon', 'Boolean'>;
  readonly stats: Prisma.FieldRef<'CaughtPokemon', 'Json'>;
  readonly userId: Prisma.FieldRef<'CaughtPokemon', 'String'>;
}

// Custom InputTypes
/**
 * CaughtPokemon findUnique
 */
export type CaughtPokemonFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CaughtPokemon
   */
  select?: Prisma.CaughtPokemonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CaughtPokemon
   */
  omit?: Prisma.CaughtPokemonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CaughtPokemonInclude<ExtArgs> | null;
  /**
   * Filter, which CaughtPokemon to fetch.
   */
  where: Prisma.CaughtPokemonWhereUniqueInput;
};

/**
 * CaughtPokemon findUniqueOrThrow
 */
export type CaughtPokemonFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CaughtPokemon
   */
  select?: Prisma.CaughtPokemonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CaughtPokemon
   */
  omit?: Prisma.CaughtPokemonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CaughtPokemonInclude<ExtArgs> | null;
  /**
   * Filter, which CaughtPokemon to fetch.
   */
  where: Prisma.CaughtPokemonWhereUniqueInput;
};

/**
 * CaughtPokemon findFirst
 */
export type CaughtPokemonFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CaughtPokemon
   */
  select?: Prisma.CaughtPokemonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CaughtPokemon
   */
  omit?: Prisma.CaughtPokemonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CaughtPokemonInclude<ExtArgs> | null;
  /**
   * Filter, which CaughtPokemon to fetch.
   */
  where?: Prisma.CaughtPokemonWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CaughtPokemon to fetch.
   */
  orderBy?:
    | Prisma.CaughtPokemonOrderByWithRelationInput
    | Prisma.CaughtPokemonOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CaughtPokemon.
   */
  cursor?: Prisma.CaughtPokemonWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CaughtPokemon from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CaughtPokemon.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CaughtPokemon.
   */
  distinct?:
    | Prisma.CaughtPokemonScalarFieldEnum
    | Prisma.CaughtPokemonScalarFieldEnum[];
};

/**
 * CaughtPokemon findFirstOrThrow
 */
export type CaughtPokemonFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CaughtPokemon
   */
  select?: Prisma.CaughtPokemonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CaughtPokemon
   */
  omit?: Prisma.CaughtPokemonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CaughtPokemonInclude<ExtArgs> | null;
  /**
   * Filter, which CaughtPokemon to fetch.
   */
  where?: Prisma.CaughtPokemonWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CaughtPokemon to fetch.
   */
  orderBy?:
    | Prisma.CaughtPokemonOrderByWithRelationInput
    | Prisma.CaughtPokemonOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CaughtPokemon.
   */
  cursor?: Prisma.CaughtPokemonWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CaughtPokemon from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CaughtPokemon.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CaughtPokemon.
   */
  distinct?:
    | Prisma.CaughtPokemonScalarFieldEnum
    | Prisma.CaughtPokemonScalarFieldEnum[];
};

/**
 * CaughtPokemon findMany
 */
export type CaughtPokemonFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CaughtPokemon
   */
  select?: Prisma.CaughtPokemonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CaughtPokemon
   */
  omit?: Prisma.CaughtPokemonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CaughtPokemonInclude<ExtArgs> | null;
  /**
   * Filter, which CaughtPokemon to fetch.
   */
  where?: Prisma.CaughtPokemonWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CaughtPokemon to fetch.
   */
  orderBy?:
    | Prisma.CaughtPokemonOrderByWithRelationInput
    | Prisma.CaughtPokemonOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing CaughtPokemon.
   */
  cursor?: Prisma.CaughtPokemonWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CaughtPokemon from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CaughtPokemon.
   */
  skip?: number;
  distinct?:
    | Prisma.CaughtPokemonScalarFieldEnum
    | Prisma.CaughtPokemonScalarFieldEnum[];
};

/**
 * CaughtPokemon create
 */
export type CaughtPokemonCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CaughtPokemon
   */
  select?: Prisma.CaughtPokemonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CaughtPokemon
   */
  omit?: Prisma.CaughtPokemonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CaughtPokemonInclude<ExtArgs> | null;
  /**
   * The data needed to create a CaughtPokemon.
   */
  data: Prisma.XOR<
    Prisma.CaughtPokemonCreateInput,
    Prisma.CaughtPokemonUncheckedCreateInput
  >;
};

/**
 * CaughtPokemon createMany
 */
export type CaughtPokemonCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many CaughtPokemon.
   */
  data:
    | Prisma.CaughtPokemonCreateManyInput
    | Prisma.CaughtPokemonCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * CaughtPokemon createManyAndReturn
 */
export type CaughtPokemonCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CaughtPokemon
   */
  select?: Prisma.CaughtPokemonSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the CaughtPokemon
   */
  omit?: Prisma.CaughtPokemonOmit<ExtArgs> | null;
  /**
   * The data used to create many CaughtPokemon.
   */
  data:
    | Prisma.CaughtPokemonCreateManyInput
    | Prisma.CaughtPokemonCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CaughtPokemonIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * CaughtPokemon update
 */
export type CaughtPokemonUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CaughtPokemon
   */
  select?: Prisma.CaughtPokemonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CaughtPokemon
   */
  omit?: Prisma.CaughtPokemonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CaughtPokemonInclude<ExtArgs> | null;
  /**
   * The data needed to update a CaughtPokemon.
   */
  data: Prisma.XOR<
    Prisma.CaughtPokemonUpdateInput,
    Prisma.CaughtPokemonUncheckedUpdateInput
  >;
  /**
   * Choose, which CaughtPokemon to update.
   */
  where: Prisma.CaughtPokemonWhereUniqueInput;
};

/**
 * CaughtPokemon updateMany
 */
export type CaughtPokemonUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update CaughtPokemon.
   */
  data: Prisma.XOR<
    Prisma.CaughtPokemonUpdateManyMutationInput,
    Prisma.CaughtPokemonUncheckedUpdateManyInput
  >;
  /**
   * Filter which CaughtPokemon to update
   */
  where?: Prisma.CaughtPokemonWhereInput;
  /**
   * Limit how many CaughtPokemon to update.
   */
  limit?: number;
};

/**
 * CaughtPokemon updateManyAndReturn
 */
export type CaughtPokemonUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CaughtPokemon
   */
  select?: Prisma.CaughtPokemonSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the CaughtPokemon
   */
  omit?: Prisma.CaughtPokemonOmit<ExtArgs> | null;
  /**
   * The data used to update CaughtPokemon.
   */
  data: Prisma.XOR<
    Prisma.CaughtPokemonUpdateManyMutationInput,
    Prisma.CaughtPokemonUncheckedUpdateManyInput
  >;
  /**
   * Filter which CaughtPokemon to update
   */
  where?: Prisma.CaughtPokemonWhereInput;
  /**
   * Limit how many CaughtPokemon to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CaughtPokemonIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * CaughtPokemon upsert
 */
export type CaughtPokemonUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CaughtPokemon
   */
  select?: Prisma.CaughtPokemonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CaughtPokemon
   */
  omit?: Prisma.CaughtPokemonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CaughtPokemonInclude<ExtArgs> | null;
  /**
   * The filter to search for the CaughtPokemon to update in case it exists.
   */
  where: Prisma.CaughtPokemonWhereUniqueInput;
  /**
   * In case the CaughtPokemon found by the `where` argument doesn't exist, create a new CaughtPokemon with this data.
   */
  create: Prisma.XOR<
    Prisma.CaughtPokemonCreateInput,
    Prisma.CaughtPokemonUncheckedCreateInput
  >;
  /**
   * In case the CaughtPokemon was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.CaughtPokemonUpdateInput,
    Prisma.CaughtPokemonUncheckedUpdateInput
  >;
};

/**
 * CaughtPokemon delete
 */
export type CaughtPokemonDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CaughtPokemon
   */
  select?: Prisma.CaughtPokemonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CaughtPokemon
   */
  omit?: Prisma.CaughtPokemonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CaughtPokemonInclude<ExtArgs> | null;
  /**
   * Filter which CaughtPokemon to delete.
   */
  where: Prisma.CaughtPokemonWhereUniqueInput;
};

/**
 * CaughtPokemon deleteMany
 */
export type CaughtPokemonDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which CaughtPokemon to delete
   */
  where?: Prisma.CaughtPokemonWhereInput;
  /**
   * Limit how many CaughtPokemon to delete.
   */
  limit?: number;
};

/**
 * CaughtPokemon without action
 */
export type CaughtPokemonDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CaughtPokemon
   */
  select?: Prisma.CaughtPokemonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CaughtPokemon
   */
  omit?: Prisma.CaughtPokemonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CaughtPokemonInclude<ExtArgs> | null;
};
